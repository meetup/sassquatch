/*doc
---
title: Segmented Control
name: segmentedControl
category: Navigation
---

This is a design pattern that should be used for elements that appear as
buttons in the UI and have button-like functionality, appearing grouped
together and interrelated.

Element type       | Use
-------------------| ---------------------------------------------------
`<a>`              | Hash modification; changing contents of view below
`<input radio>`    | Making a mutually-exclusive form choice
`<input checkbox>` | Toggling a particular feature

```html_example
	<div class='segmented-control'>
		<div class="segmented-control-segment">
			<input type='radio' name='guestsRadio' value='0' id='guestsRadio0' class='segmented-control-input' checked />
			<label for='guestsRadio0' id='guestsRadio0label' class='segmented-control-button'>Just me</label>
		</div>
		<div class="segmented-control-segment">
			<input type='radio' name='guestsRadio' value='1' id='guestsRadio1' class='segmented-control-input' />
			<label for='guestsRadio1' id='guestsRadio1label' class='segmented-control-button'>+1</label>
		</div>
	</div>
```

*/

/* ======================================================================== */
/* SEGMENTED CONTROL
 *
 * This component uses tabular layout, and can be used with one, or more,
 * elements. The result is a bunch of equally-sized segments in a thing
 * that looks like a button.
 *
 * In order to maintain IE8 compatibility, we need to have slightly different
 * layouts, which means having two classes: one in which we're using a pattern
 * where the immediate children of a segmented control are `.button`, and
 * another where there `.button` are wrapped in a secondary element, particularly
 * to hide extraneous native UI (checkboxes and radio buttons, for ex).
 *
 * NOTE: Why use multiple class names, rather than immediate child selectors?
 * Mostly for performance reasons, since `>` selectors aren't particularly
 * efficient, ostensibly.
 */


/* Wrapping element */
.segmented-control {
	@include experimental(box-sizing, border-box);
	@include experimental(background-clip, padding-box);
	@extend %clearfix;
	display: inline-block;
	border-radius: $defaultRadius;
	list-style-type: none;
	margin-bottom: $spacing;
	padding-left: 0;
	line-height: 1.5;
	border: 1px solid $C_border;
	text-align: left;
	font-size: 0; // reset whitespace for inline-block list items
}

.segmented-control-segment {
	padding-top: 0;
	display: inline-block;
	text-align: center;
}

.segmented-control-button {
	@include button_personality;
	font-family: $uiControlFontStack;
	font-size: $font-size-small;
	font-weight: $W_normal;
	padding: 0.5em 1.2em 0.4em;
	display: block;
	border-right: 1px solid $C_border;

	.segmented-control-segment:last-child & {
		border-width: 0;
	}
}


/* These next two are sort of nasty selectors--but since this doesn't work
 * in IE8 anyway (border radius not supported), do we care? -j
 */
.segmented-control-segment:first-child .segmented-control-button {
	border-top-left-radius: $defaultRadius - 1px;
	border-bottom-left-radius: $defaultRadius - 1px;
}

.segmented-control-segment:last-child .segmented-control-button {
	border-top-right-radius: $defaultRadius - 1px;
	border-bottom-right-radius: $defaultRadius - 1px;
}

.segmented-control-input {
	position: absolute;
	visibility: hidden;
}

/* Checked States: Natural, and with class (via JS, for IE8) */
.segmented-control-input:checked + .segmented-control-button {
	background-color: $C_highlight !important;
	color: $C_link !important;
	font-weight: $W_bold;
}
